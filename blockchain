#include <iostream>
#include <sstream>
#include <vector>
#include <iomanip>
#include <cstring>
#include <stdint.h>

// Function for performing right bitwise rotation
inline uint32_t rotateBitsRight(uint32_t value, int shift) {
    return (value >> shift) | (value << (32 - shift));
}

// SHA-256 Compression process
void compressSHA256Hash(std::vector<uint32_t> &hashState, const std::vector<uint32_t> &constants, const std::vector<uint32_t> &messageSchedule) {
    for (int i = 0; i < 64; ++i) {
        uint32_t s1 = rotateBitsRight(hashState[4], 6) ^ rotateBitsRight(hashState[4], 11) ^ rotateBitsRight(hashState[4], 25);
        uint32_t choice = (hashState[4] & hashState[5]) ^ (~hashState[4] & hashState[6]);
        uint32_t temp1 = hashState[7] + s1 + choice + constants[i] + messageSchedule[i];
        uint32_t s0 = rotateBitsRight(hashState[0], 2) ^ rotateBitsRight(hashState[0], 13) ^ rotateBitsRight(hashState[0], 22);
        uint32_t majority = (hashState[0] & hashState[1]) ^ (hashState[0] & hashState[2]) ^ (hashState[1] & hashState[2]);
        uint32_t temp2 = s0 + majority;

        hashState[7] = hashState[6];
        hashState[6] = hashState[5];
        hashState[5] = hashState[4];
        hashState[4] = (hashState[3] + temp1) % UINT32_MAX;
        hashState[3] = hashState[2];
        hashState[2] = hashState[1];
        hashState[1] = hashState[0];
        hashState[0] = (temp1 + temp2) % UINT32_MAX;
    }
}

// SHA-256 Hash calculation function
std::vector<uint32_t> calculateSHA256(const std::string &inputData) {
    std::vector<uint32_t> hashState = {0x6a09e667, 0xbb67ae85, 0x3c6ef372,
                                        0xa54ff53a, 0x510e527f, 0x9b05688c,
                                        0x1f83d9ab, 0x5be0cd19};

    std::vector<uint32_t> constants = {
        0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1,
        0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
        0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786,
        0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147,
        0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
        0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b,
        0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a,
        0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
        0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2};

    // Padding the input data
    uint64_t inputLength = inputData.length() * 8;
    std::string paddedData = inputData + static_cast<char>(0x80);
    while (paddedData.length() % 64 != 56) {
        paddedData += static_cast<char>(0x00);
    }
    for (int i = 7; i >= 0; --i) {
        paddedData += static_cast<char>((inputLength >> (i * 8)) & 0xFF);
    }

    // Processing the padded data in 512-bit chunks
    for (size_t i = 0; i < paddedData.length(); i += 64) {
        std::vector<uint32_t> messageSchedule(64, 0);
        for (int j = 0; j < 16; ++j) {
            messageSchedule[j] =
                (static_cast<uint32_t>(paddedData[i + j * 4]) << 24) |
                (static_cast<uint32_t>(paddedData[i + j * 4 + 1]) << 16) |
                (static_cast<uint32_t>(paddedData[i + j * 4 + 2]) << 8) |
                static_cast<uint32_t>(paddedData[i + j * 4 + 3]);
        }

        for (int j = 16; j < 64; ++j) {
            uint32_t s0 = rotateBitsRight(messageSchedule[j - 15], 7) ^
                          rotateBitsRight(messageSchedule[j - 15], 18) ^ (messageSchedule[j - 15] >> 3);
            uint32_t s1 = rotateBitsRight(messageSchedule[j - 2], 17) ^
                          rotateBitsRight(messageSchedule[j - 2], 19) ^ (messageSchedule[j - 2] >> 10);
            messageSchedule[j] = (messageSchedule[j - 16] + s0 + messageSchedule[j - 7] + s1) % UINT32_MAX;
        }

        compressSHA256Hash(hashState, constants, messageSchedule);
    }

    return hashState;
}

// Convert the computed hash to a hexadecimal representation
std::string toHexString(const std::vector<uint32_t> &hash) {
    std::ostringstream hexStream;
    for (const auto &value : hash) {
        hexStream << std::hex << std::setw(8) << std::setfill('0') << value;
    }
    return hexStream.str();
}

int main() {
    std::string bookContent;

    // Prompt for the Book of Mark text via standard input
    std::cout << "Please paste the text of the Book of Mark (press Ctrl+D when finished):" << std::endl;
    std::getline(std::cin, bookContent, '\0');  // Read input until EOF

    if (!bookContent.empty()) {
        std::vector<uint32_t> finalHash = calculateSHA256(bookContent);
        std::string hashOutput = toHexString(finalHash);
        std::cout << "SHA-256 Hash of the Book of Mark: " << hashOutput << std::endl;
    } else {
        std::cerr << "Input is empty!" << std::endl;
    }

    return 0;
}
